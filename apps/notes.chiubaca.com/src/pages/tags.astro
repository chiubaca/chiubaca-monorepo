---
import { getCollection } from "astro:content";
import MainLayout from "../layouts/MainLayout.astro";
import { NoteTypes } from "@shared/types";

type Note = {
  collection: string;
  slug: string;
  tags: string[];
};
const collections: NoteTypes[] = [
  "fleeting-notes",
  "literature-notes",
  "permanent-notes",
];

const collectionPromise = collections.map(async (collectionName) => {
  const collection = await getCollection(collectionName);

  return collection.map((note) => ({
    collection: note.collection,
    slug: note.slug,
    tags: note.data.tags ? note.data.tags : ["uncategorised"],
  }));
});

const notesByCollection = await Promise.all(collectionPromise);

const flattenedNotes = notesByCollection.flat();

type NotesGroupedByTag = {
  tag: string;
  notes: Note[];
};

function groupNotesByTag(notes: Note[]): NotesGroupedByTag[] {
  const taggedNotes: { [key: string]: Note[] } = {};

  notes.forEach((note) => {
    note.tags.forEach((tag) => {
      if (!taggedNotes[tag]) {
        taggedNotes[tag] = [];
      }
      taggedNotes[tag].push(note);
    });
  });

  return Object.keys(taggedNotes).map((tag) => {
    return {
      tag,
      notes: taggedNotes[tag],
    };
  });
}

const indexedNotes = groupNotesByTag(flattenedNotes).sort((a, b) =>
  a.tag.localeCompare(b.tag),
);

const tagNameAndCount = indexedNotes.map((note) => {
  return {
    tagName: note.tag,
    count: note.notes.length,
  };
});
---

<MainLayout
  breadcrumbs={[
    {
      href: "/tags",
      label: "/ tags",
    },
  ]}
>
  <h1 class="py-5 text-3xl">ğŸ”– Tags</h1>

  <main class="relative">
    <details open class="my-5">
      <summary class="pb-5"> Find notes based on their tag:</summary>
      <div class="z-10 flex flex-wrap gap-2">
        {
          tagNameAndCount.map((tag) => {
            return (
              <a href={`#${tag.tagName}`}>
                <span class="badge flex justify-evenly gap-2 p-3 lowercase hover:bg-sky-800 dark:border-slate-200">
                  # {tag.tagName}
                  <sup>{tag.count}</sup>
                </span>
              </a>
            );
          })
        }
      </div>
    </details>

    <div class="relative">
      {
        indexedNotes.map((tag) => {
          return (
            <div class="sticky">
              <h2
                id={tag.tag}
                class="sticky top-0 inline rounded-lg p-1 py-2 pt-0 font-mono text-2xl backdrop-blur-xl"
              >
                # {tag.tag}
              </h2>
              <ul class="m-5">
                {tag.notes.map((note) => {
                  return (
                    <a
                      class="hover:link-underline hover:link"
                      href={`/${note.collection}/${note.slug}`}
                    >
                      <li> {note.slug} </li>
                    </a>
                  );
                })}
              </ul>
            </div>
          );
        })
      }
    </div>
  </main>
</MainLayout>
