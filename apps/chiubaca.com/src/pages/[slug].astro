---
import { getCollection, getEntry, render } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import { SEO } from "astro-seo";
import { getImagePath } from "astro-opengraph-images";

export async function getStaticPaths() {
  const blogs = await getCollection("permanent-notes");

  const slugPaths = blogs.map((blog) => {
    return {
      params: { slug: blog.id },
    };
  });

  return slugPaths;
}

const { slug } = Astro.params;
const { url, site } = Astro;
const openGraphImageUrl = getImagePath({ url, site });

const entry = await getEntry("permanent-notes", slug);
const { Content } = await render(entry);

const breadcrumbs = [
  {
    href: "/blogs",
    label: "blogs",
  },
];

if (entry.data.status === "draft") {
  breadcrumbs.push({
    href: "/blogs/drafts",
    label: "drafts",
  });
}

breadcrumbs.push({
  href: `/${slug}`,
  label: slug,
});
---

<BaseLayout breadcrumbs={breadcrumbs}>
  <Fragment slot="head">
    <meta name="keywords" content={entry.data.tags.toString()} />
    {
      entry.data?.description && (
        <meta name="description" content={entry.data.description} />
      )
    }
    <SEO
      openGraph={{
        basic: {
          title: entry.data.title,
          type: "website",
          image: openGraphImageUrl,
          url: url,
        },
        optional: {
          description: "My page description",
        },
      }}
    />
  </Fragment>

  <div
    class="flex flex-wrap justify-center items-center gap-2 font-mono text-xs mt-[10vh]"
  >
    {
      entry.data.tags.map((tag) => (
        <a
          href={`/tags#${tag}`}
          class="hover:link  text-gray-400 before:content-['#']"
        >
          {tag}
        </a>
      ))
    }
  </div>
  <h1
    class="my-4 text-5xl font-bold text-center text-balance"
    transition:name="blog-title"
  >
    {entry.data.title}
  </h1>

  <div
    class="mb-6 flex flex-col justify-center gap-1 font-mono text-sm italic text-gray-500 dark:text-gray-400 md:flex-row md:gap-4 text-center"
  >
    <div>
      Posted on {entry.data.publish_date.toDateString()}
    </div>
    {
      entry.data.publish_date.getTime() !==
        entry.data.last_updated.getTime() && (
        <div>Updated on {entry.data.last_updated.toDateString()}</div>
      )
    }
  </div>

  <div class="text text-center font text-xl text-secondary">⊱―⊰</div>

  <article class="prose pt-10 px-5 sm:mx-auto">
    <Content />
  </article>
</BaseLayout>
