---
import { getCollection, getEntry } from "astro:content";

import MainLayout from "../layouts/MainLayout.astro";

export async function getStaticPaths() {
  const blogs = await getCollection("permanent-notes");

  const slugPaths = blogs.map((blog) => {
    return {
      params: { slug: blog.slug },
    };
  });
  return slugPaths;
}

const { slug } = Astro.params;

const entry = await getEntry("permanent-notes", slug);
const { Content } = await entry.render();

const truncateString = (str, num) =>
  str.length > num ? str.slice(0, num) + "..." : str;

const truncatedSlug = truncateString(slug, 15);
---

<MainLayout
  title={entry.data.title}
  breadcrumbs={[
    { href: "/", label: "/ 🏠" },
    { href: `/${entry.slug}`, label: `/ ${truncatedSlug}` },
  ]}
>
  <meta name="keywords" content={entry.data.tags.toString()} slot="head" />
  {
    entry.data?.description && (
      <meta name="description" content={entry.data.description} slot="head" />
    )
  }

  <article class="group prose mx-auto max-w-none prose-a:break-all">
    <h1>{entry.data.title}</h1>

    <div class="font-mono italic text-gray-500 md:text-sm dark:text-gray-400">
      Posted on {entry.data.publish_date.toDateString()}
    </div>

    <div class="my-10 flex items-center justify-center gap-2 font-mono">
      {
        entry.data.tags.map((tag) => (
          <span class="badge border-black dark:border-slate-100">#{tag}</span>
        ))
      }
    </div>

    <Content />
  </article>
</MainLayout>

<style is:inline>
  article.prose > h1 > a,
  article.prose > h2 > a,
  article.prose > h3 > a,
  article.prose > h4 > a,
  article.prose > h5 > a,
  article.prose > h6 > a {
    text-decoration: none;
  }

  .icon.icon-link {
    position: relative;
  }

  .icon.icon-link::after {
    content: "🔗";
    font-size: 1.2rem;
    margin-left: 0.3rem;
  }

  .icon.icon-link:hover::after {
    border-bottom: 1.5px dashed gray;
    font-weight: 100;
  }
</style>
