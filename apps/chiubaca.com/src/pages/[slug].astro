---
import { getCollection, getEntry, render } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const blogs = await getCollection("permanent-notes");

  const slugPaths = blogs.map((blog) => {
    return {
      params: { slug: blog.id },
    };
  });

  return slugPaths;
}

const { slug } = Astro.params;

const entry = await getEntry("permanent-notes", slug);
const { Content } = await render(entry);
---

<BaseLayout
  breadcrumbs={[
    {
      href: "/blogs",
      label: "blogs",
    },
    {
      href: "/" + slug,
      label: slug,
    },
  ]}
>
  <meta name="keywords" content={entry.data.tags.toString()} slot="head" />
  {
    entry.data?.description && (
      <meta name="description" content={entry.data.description} slot="head" />
    )
  }
  <h1 class="mb-4 text-4xl font-bold text-gray-900 dark:text-white">
    {entry.data.title}
  </h1>

  <div
    class="mb-6 flex flex-col gap-1 font-mono text-sm italic text-gray-500 dark:text-gray-400 md:flex-row md:gap-4"
  >
    <div>
      Posted on {entry.data.publish_date.toDateString()}
    </div>
    {
      entry.data.publish_date.getTime() !==
        entry.data.last_updated.getTime() && (
        <div>Updated on {entry.data.last_updated.toDateString()}</div>
      )
    }
  </div>
  <div class="my-6 flex flex-wrap items-center gap-2 font-mono text-xs">
    {
      entry.data.tags.map((tag) => (
        <a
          href={`/tags#${tag}`}
          class="hover:link border-gray-300 text-gray-600 before:content-['#'] dark:border-gray-600 dark:text-gray-400"
        >
          {tag}
        </a>
      ))
    }
  </div>
  <article class="prose">
    <Content />
  </article>
</BaseLayout>
