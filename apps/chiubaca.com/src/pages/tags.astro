---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";

const collections = ["fleeting-notes", "permanent-notes"] as const;

const mapCollectionsToPath: Record<(typeof collections)[number], string> = {
  "fleeting-notes": "notes",
  "permanent-notes": "blogs",
} as const;

type Note = {
  collection: (typeof collections)[number];
  path: string;
  slug: string;
  tags: string[];
};

const collectionPromise = collections.map(async (collectionName) => {
  const collection = await getCollection(collectionName);

  return collection.map((note) => ({
    collection: note.collection,
    path: mapCollectionsToPath[note.collection],
    slug: note.id,
    tags: note.data.tags ? note.data.tags : ["uncategorised"],
  }));
});

const notesByCollection = await Promise.all(collectionPromise);

const flattenedNotes = notesByCollection.flat();

type NotesGroupedByTag = {
  tag: string;
  notes: Note[];
};

function groupNotesByTag(notes: Note[]): NotesGroupedByTag[] {
  const taggedNotes: { [key: string]: Note[] } = {};

  for (const note of notes) {
    for (const tag of note.tags) {
      if (!taggedNotes[tag]) {
        taggedNotes[tag] = [];
      }
      taggedNotes[tag].push(note);
    }
  }

  return Object.keys(taggedNotes).map((tag) => {
    return {
      tag,
      notes: taggedNotes[tag],
    };
  });
}

const indexedNotes = groupNotesByTag(flattenedNotes).sort((a, b) =>
  a.tag.localeCompare(b.tag)
);

const tagNameAndCount = indexedNotes.map((note) => {
  return {
    tagName: note.tag,
    count: note.notes.length,
  };
});
---

<BaseLayout
  breadcrumbs={[
    {
      href: "/tags",
      label: "tags",
    },
  ]}
>
  <main class="relative">
    <div class="max-w-3xl mx-auto px-5">
      <h1 class="mt-16 text-2xl font-semibold font-mono">ðŸ”– Tags</h1>
      <p class="italic text-secondary pb-8">tags taxonomy</p>
    </div>
    <details class="my-5 max-w-3xl mx-auto px-5">
      <summary class="pb-5"> show all tags </summary>
      <div class="z-10 flex flex-wrap gap-5">
        {
          tagNameAndCount.map((tag) => {
            return (
              <div class="flex items-baseline">
                <a
                  href={`#${tag.tagName}`}
                  class="flex justify-evenly gap-2 lowercase hover:link"
                >
                  {tag.tagName}
                </a>
                <sup class="pl-1">{tag.count}</sup>
              </div>
            );
          })
        }
      </div>
    </details>

    <div class="max-w-3xl mx-auto px-5">
      {
        indexedNotes.map((tag) => {
          return (
            <div>
              <h2
                id={tag.tag}
                class="sticky top-8 inline rounded-lg p-1 py-2 pt-0 font-mono text-2xl backdrop-blur-sm "
              >
                # {tag.tag}
              </h2>
              <ul class="m-5">
                {tag.notes.map((note) => {
                  return (
                    <a
                      class="hover:link-underline hover:link"
                      href={
                        note.collection === "permanent-notes"
                          ? `/${note.slug}`
                          : `/${note.collection}/${note.slug}`
                      }
                    >
                      <li> {note.slug} </li>
                    </a>
                  );
                })}
              </ul>
            </div>
          );
        })
      }
    </div>
  </main>
</BaseLayout>
