<div class="w-full overflow-hidden opacity-80">
  <svg
    transition:name="bear-icon"
    viewBox="0 0 1440 90"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    class="h-auto w-full"
    preserveAspectRatio="xMidYMax meet"
  >
    {/* <!-- Pixel art grass --> */}
    {/* <!-- Base layer of grass --> */}
    <rect x="0" y="70" width="1440" height="20" fill="#3A5F0B"></rect>
    {/* Dark green base */}
    <rect x="0" y="60" width="1440" height="10" fill="#5C8A4F"></rect>
    {/* Mid green */}

    {/* <!-- Pixelated blades of grass --> */}
    {
      Array.from({ length: 1440 / 10 }).map((_, i) => {
        const xBase = i * 10;
        const bladeHeight = Math.random() * 30 + 20; // Random height between 20 and 50
        const topY = 70 - bladeHeight;
        const color1 = Math.random() > 0.5 ? "#6B9A5F" : "#7DB86C"; // Lighter green shades
        const color2 = Math.random() > 0.3 ? "#5C8A4F" : "#4A7040"; // Mid/Darker green shades

        return (
          <>
            {/* <!-- Main blade part --> */}
            <rect
              x={xBase + 2}
              y={topY}
              width="6"
              height={bladeHeight}
              fill={color1}
            />
            {/* <!-- Shadow/variation part of blade --> */}
            <rect
              x={xBase}
              y={topY + bladeHeight * 0.3}
              width="2"
              height={bladeHeight * 0.7}
              fill={color2}
            />
            <rect
              x={xBase + 8}
              y={topY + bladeHeight * 0.4}
              width="2"
              height={bladeHeight * 0.6}
              fill={color2}
            />

            {/* <!-- Tip pixel --> */}
            <rect
              x={xBase + 4}
              y={topY - 5 > 0 ? topY - 5 : 0}
              width="2"
              height="5"
              fill={color1}
            />

            {/* <!-- Occasional taller "pixel" blades --> */}
            {Math.random() > 0.8 && (
              <rect
                x={xBase + Math.floor(Math.random() * 3) * 2}
                y={topY - 10 > 0 ? topY - 10 : 0}
                width="2"
                height={Math.random() * 5 + 5}
                fill={color1}
              />
            )}
          </>
        );
      })
    }

    {/* <!-- Add some "plant" like pixel structures --> */}
    {
      Array.from({ length: 1440 / 80 }).map((_, i) => {
        const xBase = i * 80 + Math.random() * 20;
        const plantBaseY = 50;
        const darkPlantColor = "#3A5F0B";
        const lightPlantColor = "#5C8A4F";
        return (
          <>
            {/* <!-- Stem --> */}
            <rect
              x={xBase + 8}
              y={plantBaseY - 20}
              width="4"
              height="20"
              fill={darkPlantColor}
            />
            {/* <!-- Leaves --> */}
            <rect
              x={xBase}
              y={plantBaseY - 15}
              width="8"
              height="4"
              fill={lightPlantColor}
            />
            <rect
              x={xBase + 12}
              y={plantBaseY - 15}
              width="8"
              height="4"
              fill={lightPlantColor}
            />
            <rect
              x={xBase + 4}
              y={plantBaseY - 25}
              width="12"
              height="4"
              fill={lightPlantColor}
            />
            <rect
              x={xBase + 6}
              y={plantBaseY - 30}
              width="8"
              height="5"
              fill={darkPlantColor}
            />
          </>
        );
      })
    }

    {/* Autumn ground leaves (scattered) */}
    {
      (() => {
        const leafColors = [
          "#C65D0E",
          "#D97706",
          "#B45309",
          "#92400E",
          "#B84E3A",
          "#E6B422",
        ];
        return Array.from({ length: 1440 / 20 }).map((_, i) => {
          const x = i * 20 + Math.random() * 12;
          const y = 65 + Math.random() * 8; // on top of the grass
          const color =
            leafColors[Math.floor(Math.random() * leafColors.length)];
          // tiny pixel leaf (diamond-ish): 3 rects
          return (
            <>
              <rect x={x} y={y} width="2" height="2" fill={color} />
              <rect x={x + 2} y={y + 2} width="2" height="2" fill={color} />
              <rect x={x + 4} y={y} width="2" height="2" fill={color} />
            </>
          );
        });
      })()
    }

    {/* Gently falling autumn leaves (animated) */}
    {
      (() => {
        const leafColors = [
          "#C65D0E",
          "#D97706",
          "#B45309",
          "#92400E",
          "#B84E3A",
          "#E6B422",
        ];
        return Array.from({ length: 12 }).map((_, i) => {
          const startX = Math.random() * 1440;
          const delay = (Math.random() * 6).toFixed(2);
          const duration = (8 + Math.random() * 6).toFixed(2);
          const sway = 10 + Math.random() * 20;
          const rotation = Math.random() > 0.5 ? 180 : 360;
          const color =
            leafColors[Math.floor(Math.random() * leafColors.length)];
          return (
            <g>
              {/* leaf shape centered around (0,0) so transforms look natural */}
              <rect x={-1} y={-1} width="2" height="2" fill={color} />
              <rect x={1} y={1} width="2" height="2" fill={color} />
              <rect x={3} y={-1} width="2" height="2" fill={color} />
              {/* fall down */}
              <animateTransform
                attributeName="transform"
                type="translate"
                from={`${startX} -10`}
                to={`${startX} 75`}
                dur={`${duration}s`}
                begin={`${delay}s`}
                repeatCount="indefinite"
              />
              {/* horizontal sway */}
              <animateTransform
                attributeName="transform"
                additive="sum"
                type="translate"
                values={`${-sway / 2} 0; ${sway / 2} 0; ${-sway / 3} 0; 0 0`}
                keyTimes="0;0.4;0.8;1"
                dur={`${(parseFloat(duration) / 2).toFixed(2)}s`}
                begin={`${delay}s`}
                repeatCount="indefinite"
              />
              {/* gentle spin */}
              <animateTransform
                attributeName="transform"
                additive="sum"
                type="rotate"
                from={`0 0 0`}
                to={`${rotation} 0 0`}
                dur={`${duration}s`}
                begin={`${delay}s`}
                repeatCount="indefinite"
              />
            </g>
          );
        });
      })()
    }
  </svg>
</div>
